// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.mock;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.servlet.ModelAndView;

public class OwnerController_showOwner_db2a323b89_Test {

    private MockMvc mockMvc;

    private OwnerRepository owners;

    private OwnerController ownerController;

    @BeforeEach
    public void setup() {
        this.owners = mock(OwnerRepository.class);
        this.ownerController = new OwnerController(owners, null, null);
        this.mockMvc = standaloneSetup(ownerController).build();
    }

    @Test
    public void testShowOwner() throws Exception {
        Owner owner = new Owner();
        owner.setId(1);
        owner.setFirstName("Test");
        owner.setLastName("Owner");
        given(this.owners.findById(anyInt())).willReturn(owner);
        this.mockMvc.perform(get("/owners/{ownerId}", 1))
            .andExpect(status().isOk())
            .andExpect(view().name("owners/ownerDetails"))
            .andExpect(model().attributeExists("owner"))
            .andExpect(model().attribute("owner", owner));
    }

    @Test
    public void testShowOwnerNotFound() throws Exception {
        given(this.owners.findById(anyInt())).willReturn(null);
        this.mockMvc.perform(get("/owners/{ownerId}", 1))
            .andExpect(status().isNotFound());
    }
}
