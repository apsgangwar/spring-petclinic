// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.ui.Model;

public class OwnerController_initUpdateOwnerForm_5166028c6b_Test {

    private static final int OWNER_ID = 1;
    private static final String VIEWS_OWNER_CREATE_OR_UPDATE_FORM = "owners/createOrUpdateOwnerForm";

    @Mock
    private OwnerRepository owners;

    @Mock
    private Model model;

    @InjectMocks
    private OwnerController controller;

    private MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void testInitUpdateOwnerFormSuccess() throws Exception {
        Owner owner = new Owner();
        owner.setId(OWNER_ID);

        when(owners.findById(OWNER_ID)).thenReturn(owner);

        mockMvc.perform(get("/owners/{ownerId}/edit", OWNER_ID))
            .andExpect(view().name(VIEWS_OWNER_CREATE_OR_UPDATE_FORM))
            .andExpect(model().attributeExists("owner"));

        verify(owners).findById(OWNER_ID);
    }

    @Test
    public void testInitUpdateOwnerFormOwnerNotFound() throws Exception {
        when(owners.findById(OWNER_ID)).thenReturn(null);

        mockMvc.perform(get("/owners/{ownerId}/edit", OWNER_ID))
            .andExpect(view().name("errors/ownerNotFound"));

        verify(owners).findById(OWNER_ID);
    }
}
