// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class OwnerController_findPaginatedForOwnersLastName_5e7208e66f_Test {

    @InjectMocks
    OwnerController ownerController;

    @Mock
    OwnerRepository owners;

    @Test
    public void testFindPaginatedForOwnersLastName() {
        String lastname = "Smith";
        int page = 1;
        int pageSize = 5;
        Pageable pageable = PageRequest.of(page - 1, pageSize);
        
        Owner owner1 = new Owner();
        owner1.setLastName(lastname);
        Owner owner2 = new Owner();
        owner2.setLastName(lastname);
        List<Owner> ownerList = Arrays.asList(owner1, owner2);
        
        Page<Owner> pageOwners = new PageImpl<>(ownerList, pageable, ownerList.size());
        when(owners.findByLastName(lastname, pageable)).thenReturn(pageOwners);

        Page<Owner> result = ownerController.findPaginatedForOwnersLastName(page, lastname);
        
        assertEquals(pageOwners, result);
    }

    @Test
    public void testFindPaginatedForOwnersLastName_Empty() {
        String lastname = "Smith";
        int page = 1;
        int pageSize = 5;
        Pageable pageable = PageRequest.of(page - 1, pageSize);
        
        List<Owner> ownerList = Arrays.asList();
        
        Page<Owner> pageOwners = new PageImpl<>(ownerList, pageable, ownerList.size());
        when(owners.findByLastName(lastname, pageable)).thenReturn(pageOwners);

        Page<Owner> result = ownerController.findPaginatedForOwnersLastName(page, lastname);
        
        assertEquals(pageOwners, result);
    }
}
