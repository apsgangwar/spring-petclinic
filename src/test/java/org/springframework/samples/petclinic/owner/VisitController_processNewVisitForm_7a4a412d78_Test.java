// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.Assert.assertEquals;
import jakarta.validation.Valid;
import java.util.Map;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

@RunWith(MockitoJUnitRunner.class)
public class VisitController_processNewVisitForm_7a4a412d78_Test {

    @InjectMocks
    private VisitController visitController;

    @Mock
    private Owner owner;

    @Mock
    private BindingResult result;

    @Mock
    private Visit visit;

    @Before
    public void setup() {
        when(owner.addVisit(1, visit)).thenReturn(true);
    }

    @Test
    public void testProcessNewVisitForm_WhenResultHasErrors() {
        when(result.hasErrors()).thenReturn(true);
        String view = visitController.processNewVisitForm(owner, 1, visit, result);
        assertEquals("pets/createOrUpdateVisitForm", view);
    }

    @Test
    public void testProcessNewVisitForm_WhenResultHasNoErrors() {
        when(result.hasErrors()).thenReturn(false);
        String view = visitController.processNewVisitForm(owner, 1, visit, result);
        verify(owner).addVisit(1, visit);
        assertEquals("redirect:/owners/{ownerId}", view);
    }
}
