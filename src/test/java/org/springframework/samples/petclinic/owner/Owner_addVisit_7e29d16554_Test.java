// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.samples.petclinic.model.Visit;
import org.springframework.samples.petclinic.model.Pet;

@ExtendWith(MockitoExtension.class)
public class Owner_addVisit_7e29d16554_Test {
    
    @Mock
    private Pet pet;

    @InjectMocks
    private Owner owner;

    @BeforeEach
    public void setup() {
        when(owner.getPet(any(Integer.class))).thenReturn(pet);
    }

    @Test
    public void testAddVisit_Success() {
        Visit visit = new Visit();
        owner.addVisit(1, visit);
        verify(pet, times(1)).addVisit(visit);
    }

    @Test
    public void testAddVisit_NullPetId() {
        try {
            owner.addVisit(null, new Visit());
        } catch (IllegalArgumentException e) {
            assertEquals("Pet identifier must not be null!", e.getMessage());
        }
    }

    @Test
    public void testAddVisit_NullVisit() {
        try {
            owner.addVisit(1, null);
        } catch (IllegalArgumentException e) {
            assertEquals("Visit must not be null!", e.getMessage());
        }
    }

    @Test
    public void testAddVisit_InvalidPetId() {
        when(owner.getPet(any(Integer.class))).thenReturn(null);
        try {
            owner.addVisit(1, new Visit());
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid Pet identifier!", e.getMessage());
        }
    }
}
