// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.samples.petclinic.model.Visit;
import org.springframework.samples.petclinic.owner.Pet;
import org.springframework.samples.petclinic.owner.PetService;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class Owner_addVisit_7e29d16554_Test {

    @Mock
    PetService petService;

    @InjectMocks
    Owner owner;

    @Test
    public void testAddVisitWithValidInputs() {
        Visit visit = new Visit();
        Pet pet = new Pet();
        when(petService.getPet(1)).thenReturn(pet);

        owner.addVisit(1, visit);

        verify(petService).getPet(1);
        verify(pet).addVisit(visit);
    }

    @Test
    public void testAddVisitWithNullPetId() {
        Visit visit = new Visit();

        assertThrows(IllegalArgumentException.class, () -> {
            owner.addVisit(null, visit);
        });
    }

    @Test
    public void testAddVisitWithNullVisit() {
        assertThrows(IllegalArgumentException.class, () -> {
            owner.addVisit(1, null);
        });
    }

    @Test
    public void testAddVisitWithInvalidPetId() {
        when(petService.getPet(1)).thenReturn(null);

        assertThrows(IllegalArgumentException.class, () -> {
            owner.addVisit(1, new Visit());
        });
    }
}
