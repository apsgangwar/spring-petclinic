// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDate;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;

public class PetController_processUpdateForm_8b32776c46_Test {

    private static final String VIEWS_PETS_CREATE_OR_UPDATE_FORM = "pets/createOrUpdatePetForm";

    @Mock
    BindingResult result;

    @Mock
    Owner owner;

    @Mock
    ModelMap model;

    Pet pet;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        pet = new Pet();
    }

    @Test
    public void testProcessUpdateForm_noErrors() {
        when(result.hasErrors()).thenReturn(false);
        when(owner.getPet(pet.getName())).thenReturn(null);
        pet.setBirthDate(LocalDate.now().minusDays(1));

        String view = processUpdateForm(pet, result, owner, model);

        verify(owner).addPet(pet);
        assertEquals("redirect:/owners/{ownerId}", view);
    }

    @Test
    public void testProcessUpdateForm_hasErrors() {
        when(result.hasErrors()).thenReturn(true);

        String view = processUpdateForm(pet, result, owner, model);

        verify(model).put("pet", pet);
        assertEquals(VIEWS_PETS_CREATE_OR_UPDATE_FORM, view);
    }

    @Test
    public void testProcessUpdateForm_duplicateName() {
        when(owner.getPet(pet.getName())).thenReturn(new Pet());

        String view = processUpdateForm(pet, result, owner, model);

        verify(result).rejectValue("name", "duplicate", "already exists");
    }

    @Test
    public void testProcessUpdateForm_futureBirthdate() {
        pet.setBirthDate(LocalDate.now().plusDays(1));

        String view = processUpdateForm(pet, result, owner, model);

        verify(result).rejectValue("birthDate", "typeMismatch.birthDate");
    }
}
