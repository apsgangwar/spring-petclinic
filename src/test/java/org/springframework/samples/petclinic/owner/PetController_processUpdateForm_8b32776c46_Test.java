// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class PetController_processUpdateForm_8b32776c46_Test {

    @Mock
    BindingResult result;

    @Mock
    ModelMap model;

    private PetController petController;
    private Pet pet;
    private Owner owner;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        petController = new PetController();
        pet = new Pet();
        owner = new Owner();
    }

    @Test
    public void testProcessUpdateForm_whenPetNameIsDuplicate_thenRedirectToForm() {
        pet.setName("Rex");
        Owner.Pet existingPet = new Owner.Pet();
        existingPet.setName("Rex");
        existingPet.setId(1L);
        owner.addPet(existingPet);

        when(result.hasErrors()).thenReturn(true);

        String view = petController.processUpdateForm(pet, result, owner, model);

        assertEquals("pets/createOrUpdateForm", view);
    }

    @Test
    public void testProcessUpdateForm_whenBirthDateIsInFuture_thenRedirectToForm() {
        pet.setBirthDate(LocalDate.now().plusDays(1));

        when(result.hasErrors()).thenReturn(true);

        String view = petController.processUpdateForm(pet, result, owner, model);

        assertEquals("pets/createOrUpdateForm", view);
    }

    @Test
    public void testProcessUpdateForm_whenFormIsValid_thenSaveAndRedirect() {
        pet.setName("Rex");
        pet.setBirthDate(LocalDate.now().minusYears(1));

        when(result.hasErrors()).thenReturn(false);

        String view = petController.processUpdateForm(pet, result, owner, model);

        assertEquals("redirect:/owners/{ownerId}", view);
    }
}
