// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.ui.ModelMap;
import java.time.LocalDate;
import static org.mockito.BDDMockito.*;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
public class PetController_processCreationForm_0e82d3b10d_Test {

    @Mock
    private OwnerRepository owners;

    @InjectMocks
    private PetController petController;

    @Test
    public void testProcessCreationFormSuccess() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Fido");
        pet.setBirthDate(LocalDate.of(2019, 5, 5));
        BindingResult result = new BeanPropertyBindingResult(pet, "pet");
        ModelMap model = new ModelMap();

        String view = petController.processCreationForm(owner, pet, result, model);

        assertThat(view).isEqualTo("redirect:/owners/{ownerId}");
        verify(owners, times(1)).save(owner);
    }

    @Test
    public void testProcessCreationFormHasErrors() {
        Owner owner = new Owner();
        Pet pet = new Pet();
        pet.setName("Fido");
        pet.setBirthDate(LocalDate.now().plusDays(1)); // birth date in the future
        BindingResult result = new BeanPropertyBindingResult(pet, "pet");
        ModelMap model = new ModelMap();

        String view = petController.processCreationForm(owner, pet, result, model);

        assertThat(view).isEqualTo(PetController.VIEWS_PETS_CREATE_OR_UPDATE_FORM);
        assertThat(result.getFieldError("birthDate").getCode()).isEqualTo("typeMismatch.birthDate");
        verify(owners, never()).save(owner);
    }
}
