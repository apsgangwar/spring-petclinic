// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDate;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.MapBindingResult;
import org.springframework.validation.ObjectError;

public class PetController_processCreationForm_0e82d3b10d_Test {

	@InjectMocks
	private PetController petController;

	@Mock
	private OwnerRepository owners;

	private BindingResult result;
	private ModelMap modelMap;
	private Owner owner;
	private Pet pet;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);

		owner = new Owner();
		owner.setId(1);

		pet = new Pet();
		pet.setName("Bobby");
		pet.setBirthDate(LocalDate.now().minusYears(1));

		result = new MapBindingResult(modelMap, "pet");
		modelMap = new ModelMap();
	}

	@Test
	public void testProcessCreationForm_success() {
		when(owners.save(owner)).thenReturn(owner);

		String view = petController.processCreationForm(owner, pet, result, modelMap);

		assertEquals("redirect:/owners/1", view);
	}

	@Test
	public void testProcessCreationForm_duplicateName() {
		owner.addPet(pet);
		Pet newPet = new Pet();
		newPet.setName("Bobby");

		String view = petController.processCreationForm(owner, newPet, result, modelMap);

		assertEquals("pets/createOrUpdatePetForm", view);
		assertEquals("duplicate", result.getFieldError("name").getCode());
	}

	@Test
	public void testProcessCreationForm_futureBirthDate() {
		pet.setBirthDate(LocalDate.now().plusYears(1));

		String view = petController.processCreationForm(owner, pet, result, modelMap);

		assertEquals("pets/createOrUpdatePetForm", view);
		assertEquals("typeMismatch.birthDate", result.getFieldError("birthDate").getCode());
	}

	@Test
	public void testProcessCreationForm_validationErrors() {
		result.addError(new ObjectError("name", "Name cannot be empty"));

		String view = petController.processCreationForm(owner, pet, result, modelMap);

		assertEquals("pets/createOrUpdatePetForm", view);
	}
}
