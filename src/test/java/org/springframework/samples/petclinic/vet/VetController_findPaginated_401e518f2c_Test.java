// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.vet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

@ExtendWith(MockitoExtension.class)
public class VetController_findPaginated_401e518f2c_Test {

    @InjectMocks
    private VetController vetController;

    @Mock
    private VetRepository vetRepository;

    private List<Vet> vetList;

    @BeforeEach
    void setUp() {
        vetList = IntStream.range(0, 10)
                .mapToObj(i -> new Vet())
                .collect(Collectors.toList());
    }

    @Test
    void testFindPaginated_FirstPage() {
        Pageable pageable = PageRequest.of(0, 5);
        when(vetRepository.findAll(pageable)).thenReturn(new PageImpl<>(vetList.subList(0, 5), pageable, vetList.size()));

        Page<Vet> vets = vetController.findPaginated(1);
        assertEquals(5, vets.getContent().size());
    }

    @Test
    void testFindPaginated_SecondPage() {
        Pageable pageable = PageRequest.of(1, 5);
        when(vetRepository.findAll(pageable)).thenReturn(new PageImpl<>(vetList.subList(5, 10), pageable, vetList.size()));

        Page<Vet> vets = vetController.findPaginated(2);
        assertEquals(5, vets.getContent().size());
    }

    @Test
    void testFindPaginated_EmptyList() {
        Pageable pageable = PageRequest.of(0, 5);
        when(vetRepository.findAll(pageable)).thenReturn(new PageImpl<>(List.of(), pageable, 0));

        Page<Vet> vets = vetController.findPaginated(1);
        assertEquals(0, vets.getContent().size());
    }
}
