// Test generated by RoostGPT for test aps-java-pet using AI Type Open AI and AI Model gpt-4

package org.springframework.samples.petclinic.system;

import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.Cache;
import javax.cache.CacheManager;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@Configuration
@EnableCaching
public class CacheConfiguration_petclinicCacheConfigurationCustomizer_adca9b283f_Test {

    @Test
    public void testPetclinicCacheConfigurationCustomizer_CacheCreatedSuccessfully() {
        CacheManager cacheManager = Mockito.mock(CacheManager.class);
        Cache cache = Mockito.mock(Cache.class);
        when(cacheManager.createCache(Mockito.anyString(), Mockito.any(MutableConfiguration.class))).thenReturn(cache);

        JCacheManagerCustomizer customizer = petclinicCacheConfigurationCustomizer();
        customizer.customize(cacheManager);

        verify(cacheManager).createCache("vets", cacheConfiguration());
        assertNotNull(cache);
    }

    @Test
    public void testPetclinicCacheConfigurationCustomizer_CacheCreationFailed() {
        CacheManager cacheManager = Mockito.mock(CacheManager.class);
        when(cacheManager.createCache(Mockito.anyString(), Mockito.any(MutableConfiguration.class))).thenReturn(null);

        JCacheManagerCustomizer customizer = petclinicCacheConfigurationCustomizer();
        customizer.customize(cacheManager);

        verify(cacheManager).createCache("vets", cacheConfiguration());
    }

    @Bean
    public JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {
        return cm -> cm.createCache("vets", cacheConfiguration());
    }

    private MutableConfiguration<Object, Object> cacheConfiguration() {
        // TODO: define your cache configuration here
        return new MutableConfiguration<>().setStoreByValue(false);
    }
}
